{% comment %}
  Before & After Slider (Using Metafields for Dynamic Images)
{% endcomment %}

{% assign before_image = product.metafields.custom.before_image | img_url: 'master' %}
{% assign after_image = product.metafields.custom.after_image | img_url: 'master' %}

{% if before_image != blank and after_image != blank %}
  <div class="before-after-wrapper" data-before-after-wrapper>
    <figure>
      <div id="before_after_{{ product.id }}" class="before-after-slider"></div>
    </figure>
    <input 
      type="range" 
      min="0" 
      max="100" 
      value="50" 
      id="before_after_slider_{{ product.id }}" 
      class="before-after-range"
    />
  </div>

  <style>
    :root {
      --before-image: url({{ before_image }});
      --after-image: url({{ after_image }});
    }

    .before-after-wrapper {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 10;
      background-color: #1f1f1c;
      touch-action: none;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .before-after-wrapper.is--active {
      opacity: 1;
      visibility: visible;
    }

    .before-after-wrapper figure {
      background-image: var(--after-image);
      position: relative;
      margin: 0;
      background-size: cover;
      width: 100%;
      height: 100%;
    }

    .before-after-slider {
      background-image: var(--before-image);
      background-size: cover;
      bottom: 0;
      border-right: 5px solid rgba(255, 255, 255, 0.7);
      box-shadow: 10px 0 15px -13px #000;
      height: 100%;
      width: 50%;
      position: absolute;
      animation: first 2s 1 normal ease-in-out 0.1s;
    }

    .before-after-range {
      -moz-appearance: none;
      -webkit-appearance: none;
      border: none;
      background: transparent;
      cursor: col-resize;
      height: 100%;
      left: 0;
      margin: 0;
      outline: none;
      padding: 0;
      position: absolute;
      top: 0;
      width: 100%;
      z-index: 20;
      touch-action: none;
      -webkit-tap-highlight-color: transparent;
    }

    .before-after-range::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-range::-moz-range-thumb {
      -moz-appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-range::-ms-thumb {
      appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-slider::before {
      background: url('https://assets.codepen.io/191814/comparision.png') no-repeat center;
      background-size: contain;
      content: " ";
      float: right;
      height: 100%;
      margin-right: -34px;
      position: relative;
      top: 0;
      width: 64px;
    }

    @keyframes first {
      0% { width: 0%; }
      50% { width: 80%; }
      100% { width: 50%; }
    }

    /* Botón para activar before-after */
    .t4s-before-after-trigger {
      position: absolute;
      top: 10px;
      right: 10px;
      z-index: 30;
      background: rgba(0,0,0,0.5);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
  </style>

  <script>
    class BeforeAfterSlider {
      constructor(productId) {
        this.productId = productId;
        this.boundHandleInput = this.handleInput.bind(this);
        this.boundHandleToggleClick = this.handleToggleClick.bind(this);
        this.boundHandleWrapperClick = this.handleWrapperClick.bind(this);
        this.boundHandleKeydown = this.handleKeydown.bind(this);
        
        // Inicializar elementos
        this.init();
        
        // Agregar listeners globales que no dependen de los elementos
        document.addEventListener('keydown', this.boundHandleKeydown);
        
        // Escuchar eventos de la galería
        document.addEventListener('flickityt4s:ready', () => {
          console.log('Flickity ready event');
          this.updateElements();
        });
        
        document.addEventListener('flickityt4s:change', () => {
          console.log('Flickity change event');
          this.updateElements();
        });
        
        document.addEventListener('t4s:mediaChange', () => {
          console.log('Media change event');
          this.updateElements();
        });
      }

      init() {
        this.updateElements();
        this.addEventListeners();
      }

      updateElements() {
        console.log('Updating elements');
        this.slider = document.getElementById("before_after_" + this.productId);
        this.range = document.getElementById("before_after_slider_" + this.productId);
        this.wrapper = document.querySelector('[data-before-after-wrapper]');
        this.toggleButton = document.getElementById('toggleBeforeAfter');
        
        console.log('Elements found:', {
          slider: !!this.slider,
          range: !!this.range,
          wrapper: !!this.wrapper,
          toggleButton: !!this.toggleButton
        });

        // Configurar el slider
        if (this.range && this.slider) {
          this.range.value = 50;
          this.slider.style.width = "50%";
        }
      }

      addEventListeners() {
        // Solo agregar listeners una vez
        if (this.range && !this.range._hasInputListener) {
          this.range.addEventListener('input', this.boundHandleInput);
          this.range.addEventListener('change', this.boundHandleInput);
          this.range._hasInputListener = true;
        }

        if (this.toggleButton && !this.toggleButton._hasClickListener) {
          this.toggleButton.addEventListener('click', this.boundHandleToggleClick);
          this.toggleButton._hasClickListener = true;
        }

        if (this.wrapper && !this.wrapper._hasClickListener) {
          this.wrapper.addEventListener('click', this.boundHandleWrapperClick);
          this.wrapper._hasClickListener = true;
        }
      }

      handleInput(e) {
        console.log('Handle input');
        if (this.slider) {
          this.slider.style.width = this.range.value + "%";
        }
      }

      handleToggleClick(e) {
        console.log('Toggle click');
        e.preventDefault();
        e.stopPropagation();
        this.toggle();
      }

      handleWrapperClick(e) {
        if (e.target === this.wrapper) {
          this.hide();
        }
      }

      handleKeydown(e) {
        if (e.key === 'Escape') {
          this.hide();
        }
      }

      show() {
        console.log('Show called');
        if (this.wrapper) {
          // Asegurarse de que el slider esté configurado correctamente
          if (this.range && this.slider) {
            this.range.value = 50;
            this.slider.style.width = "50%";
          }
          this.wrapper.classList.add('is--active');
        }
      }

      hide() {
        console.log('Hide called');
        if (this.wrapper) {
          this.wrapper.classList.remove('is--active');
        }
      }

      toggle() {
        console.log('Toggle called');
        if (this.wrapper) {
          const isActive = this.wrapper.classList.contains('is--active');
          console.log('Is active:', isActive);
          if (isActive) {
            this.hide();
          } else {
            this.show();
          }
        }
      }
    }

    // Crear instancia cuando el DOM esté listo
    let slider;
    document.addEventListener('DOMContentLoaded', () => {
      console.log('DOM Content Loaded');
      slider = new BeforeAfterSlider({{ product.id }});
    });
  </script>
{% endif %}
