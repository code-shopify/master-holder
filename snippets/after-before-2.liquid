{% comment %}
  Before & After Slider (Using Metafields for Dynamic Images)
{% endcomment %}

{% assign before_image = product.metafields.custom.before_image | img_url: 'master' %}
{% assign after_image = product.metafields.custom.after_image | img_url: 'master' %}

{% if before_image != blank and after_image != blank %}
  <div class="before-after-wrapper" data-before-after-wrapper>
    <figure>
      <div id="before_after_{{ product.id }}" class="before-after-slider"></div>
    </figure>
    <input 
      type="range" 
      min="0" 
      max="100" 
      value="50" 
      id="before_after_slider_{{ product.id }}" 
      class="before-after-range"
    />
  </div>

  <style>
    :root {
      --before-image: url({{ before_image }});
      --after-image: url({{ after_image }});
    }

    .before-after-wrapper {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 10;
      background-color: #1f1f1c;
      touch-action: none;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .before-after-wrapper.is--active {
      opacity: 1;
      visibility: visible;
    }

    .before-after-wrapper figure {
      background-image: var(--after-image);
      position: relative;
      margin: 0;
      background-size: cover;
      width: 100%;
      height: 100%;
    }

    .before-after-slider {
      background-image: var(--before-image);
      background-size: cover;
      bottom: 0;
      border-right: 5px solid rgba(255, 255, 255, 0.7);
      box-shadow: 10px 0 15px -13px #000;
      height: 100%;
      width: 50%;
      position: absolute;
      animation: first 2s 1 normal ease-in-out 0.1s;
    }

    .before-after-range {
      -moz-appearance: none;
      -webkit-appearance: none;
      border: none;
      background: transparent;
      cursor: col-resize;
      height: 100%;
      left: 0;
      margin: 0;
      outline: none;
      padding: 0;
      position: absolute;
      top: 0;
      width: 100%;
      z-index: 20;
      touch-action: none;
      -webkit-tap-highlight-color: transparent;
    }

    .before-after-range::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-range::-moz-range-thumb {
      -moz-appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-range::-ms-thumb {
      appearance: none;
      height: 100%;
      width: 40px;
      opacity: 0.01;
      cursor: col-resize;
    }

    .before-after-slider::before {
      background: url('https://assets.codepen.io/191814/comparision.png') no-repeat center;
      background-size: contain;
      content: " ";
      float: right;
      height: 100%;
      margin-right: -34px;
      position: relative;
      top: 0;
      width: 64px;
    }

    @keyframes first {
      0% { width: 0%; }
      50% { width: 80%; }
      100% { width: 50%; }
    }

    /* Botón para activar before-after */
    .t4s-before-after-trigger {
      position: absolute;
      top: 10px;
      right: 10px;
      z-index: 30;
      background: rgba(0,0,0,0.5);
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
  </style>

  <script>
    class BeforeAfterSlider {
      constructor(productId) {
        this.productId = productId;
        this.init();
      }

      init() {
        this.slider = document.getElementById("before_after_" + this.productId);
        this.range = document.getElementById("before_after_slider_" + this.productId);
        this.wrapper = document.querySelector('[data-before-after-wrapper]');
        this.isInitialized = false;
        this.isVisible = false;
        this.boundUpdateSlider = null;
      }

      initialize() {
        if (!this.slider || !this.range) {
          // Reintentar obtener elementos si no están disponibles
          this.init();
          if (!this.slider || !this.range) return;
        }
        
        // Establecer valor inicial
        this.range.value = 50;
        this.slider.style.width = "50%";

        // Limpiar listeners anteriores si existen
        this.removeListeners();

        // Crear nuevo binding
        this.boundUpdateSlider = this.updateSlider.bind(this);
        
        // Agregar nuevos listeners
        this.addListeners();

        this.isInitialized = true;
      }

      removeListeners() {
        if (this.boundUpdateSlider && this.range) {
          this.range.removeEventListener('input', this.boundUpdateSlider);
          this.range.removeEventListener('change', this.boundUpdateSlider);
        }
      }

      addListeners() {
        if (this.range && this.boundUpdateSlider) {
          this.range.addEventListener('input', this.boundUpdateSlider);
          this.range.addEventListener('change', this.boundUpdateSlider);
        }
      }

      updateSlider(e) {
        if (e) {
          e.preventDefault();
          e.stopPropagation();
        }
        if (this.slider && this.range) {
          this.slider.style.width = this.range.value + "%";
        }
      }

      toggle() {
        if (this.isVisible) {
          this.hide();
        } else {
          this.show();
        }
      }

      show() {
        // Siempre reinicializar al mostrar
        this.initialize();
        
        if (this.wrapper) {
          this.wrapper.classList.add('is--active');
          this.isVisible = true;
          // Forzar actualización del slider
          this.updateSlider();
        }
      }

      hide() {
        if (this.wrapper) {
          this.wrapper.classList.remove('is--active');
          this.isVisible = false;
        }
      }

      destroy() {
        this.removeListeners();
        this.isInitialized = false;
        this.isVisible = false;
      }
    }

    // Mantener una referencia global al slider
    let currentSlider = null;

    function initializeSlider() {
      if (currentSlider) {
        currentSlider.destroy();
      }
      currentSlider = new BeforeAfterSlider({{ product.id }});
    }

    // Solo inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
      initializeSlider();
      
      // Usar el botón existente toggleBeforeAfter
      const toggleButton = document.getElementById('toggleBeforeAfter');
      if (toggleButton) {
        toggleButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          if (!currentSlider || !currentSlider.slider) {
            initializeSlider();
          }
          currentSlider.toggle();
        });
      }

      const wrapper = document.querySelector('[data-before-after-wrapper]');
      if (wrapper) {
        // Agregar evento para cerrar
        wrapper.addEventListener('click', (e) => {
          if (e.target === wrapper) {
            currentSlider.hide();
          }
        });
      }

      // Agregar evento para cerrar con Escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && currentSlider && currentSlider.isVisible) {
          currentSlider.hide();
        }
      });
    });

    // Reinicializar cuando cambie la galería
    document.addEventListener('t4s:mediaChange', () => {
      setTimeout(initializeSlider, 100);
    });
  </script>
{% endif %}
